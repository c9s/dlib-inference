// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inference.proto

#ifndef PROTOBUF_inference_2eproto__INCLUDED
#define PROTOBUF_inference_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_inference_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsShapeDetectionResponseImpl();
void InitDefaultsShapeDetectionResponse();
void InitDefaultsDetectionRequestImpl();
void InitDefaultsDetectionRequest();
void InitDefaultsPointImpl();
void InitDefaultsPoint();
void InitDefaultsRectangleImpl();
void InitDefaultsRectangle();
void InitDefaultsRegionImpl();
void InitDefaultsRegion();
void InitDefaultsImageImpl();
void InitDefaultsImage();
void InitDefaultsObjectImpl();
void InitDefaultsObject();
inline void InitDefaults() {
  InitDefaultsShapeDetectionResponse();
  InitDefaultsDetectionRequest();
  InitDefaultsPoint();
  InitDefaultsRectangle();
  InitDefaultsRegion();
  InitDefaultsImage();
  InitDefaultsObject();
}
}  // namespace protobuf_inference_2eproto
namespace inference {
class DetectionRequest;
class DetectionRequestDefaultTypeInternal;
extern DetectionRequestDefaultTypeInternal _DetectionRequest_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class ShapeDetectionResponse;
class ShapeDetectionResponseDefaultTypeInternal;
extern ShapeDetectionResponseDefaultTypeInternal _ShapeDetectionResponse_default_instance_;
}  // namespace inference
namespace inference {

// ===================================================================

class ShapeDetectionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.ShapeDetectionResponse) */ {
 public:
  ShapeDetectionResponse();
  virtual ~ShapeDetectionResponse();

  ShapeDetectionResponse(const ShapeDetectionResponse& from);

  inline ShapeDetectionResponse& operator=(const ShapeDetectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShapeDetectionResponse(ShapeDetectionResponse&& from) noexcept
    : ShapeDetectionResponse() {
    *this = ::std::move(from);
  }

  inline ShapeDetectionResponse& operator=(ShapeDetectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShapeDetectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShapeDetectionResponse* internal_default_instance() {
    return reinterpret_cast<const ShapeDetectionResponse*>(
               &_ShapeDetectionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ShapeDetectionResponse* other);
  friend void swap(ShapeDetectionResponse& a, ShapeDetectionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShapeDetectionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ShapeDetectionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ShapeDetectionResponse& from);
  void MergeFrom(const ShapeDetectionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ShapeDetectionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .inference.Point points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  const ::inference::Point& points(int index) const;
  ::inference::Point* mutable_points(int index);
  ::inference::Point* add_points();
  ::google::protobuf::RepeatedPtrField< ::inference::Point >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::inference::Point >&
      points() const;

  // @@protoc_insertion_point(class_scope:inference.ShapeDetectionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::inference::Point > points_;
  mutable int _cached_size_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
  friend void ::protobuf_inference_2eproto::InitDefaultsShapeDetectionResponseImpl();
};
// -------------------------------------------------------------------

class DetectionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.DetectionRequest) */ {
 public:
  DetectionRequest();
  virtual ~DetectionRequest();

  DetectionRequest(const DetectionRequest& from);

  inline DetectionRequest& operator=(const DetectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DetectionRequest(DetectionRequest&& from) noexcept
    : DetectionRequest() {
    *this = ::std::move(from);
  }

  inline DetectionRequest& operator=(DetectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionRequest* internal_default_instance() {
    return reinterpret_cast<const DetectionRequest*>(
               &_DetectionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DetectionRequest* other);
  friend void swap(DetectionRequest& a, DetectionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DetectionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DetectionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DetectionRequest& from);
  void MergeFrom(const DetectionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DetectionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .inference.Image image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::inference::Image& image() const;
  ::inference::Image* release_image();
  ::inference::Image* mutable_image();
  void set_allocated_image(::inference::Image* image);

  // .inference.Rectangle rect = 2;
  bool has_rect() const;
  void clear_rect();
  static const int kRectFieldNumber = 2;
  const ::inference::Rectangle& rect() const;
  ::inference::Rectangle* release_rect();
  ::inference::Rectangle* mutable_rect();
  void set_allocated_rect(::inference::Rectangle* rect);

  // @@protoc_insertion_point(class_scope:inference.DetectionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::inference::Image* image_;
  ::inference::Rectangle* rect_;
  mutable int _cached_size_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
  friend void ::protobuf_inference_2eproto::InitDefaultsDetectionRequestImpl();
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inference.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
  friend void ::protobuf_inference_2eproto::InitDefaultsPointImpl();
};
// -------------------------------------------------------------------

class Rectangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Rectangle* other);
  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const PROTOBUF_FINAL { return New(NULL); }

  Rectangle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rectangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inference.Rectangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
  friend void ::protobuf_inference_2eproto::InitDefaultsRectangleImpl();
};
// -------------------------------------------------------------------

class Region : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.Region) */ {
 public:
  Region();
  virtual ~Region();

  Region(const Region& from);

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(Region&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Region* other);
  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const PROTOBUF_FINAL { return New(NULL); }

  Region* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Region* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:inference.Region)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
  friend void ::protobuf_inference_2eproto::InitDefaultsRegionImpl();
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const PROTOBUF_FINAL { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .inference.Region region = 2;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 2;
  const ::inference::Region& region() const;
  ::inference::Region* release_region();
  ::inference::Region* mutable_region();
  void set_allocated_region(::inference::Region* region);

  // @@protoc_insertion_point(class_scope:inference.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::inference::Region* region_;
  mutable int _cached_size_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
  friend void ::protobuf_inference_2eproto::InitDefaultsImageImpl();
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:inference.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const PROTOBUF_FINAL { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 3;
  void clear_label();
  static const int kLabelFieldNumber = 3;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // .inference.Point start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  const ::inference::Point& start() const;
  ::inference::Point* release_start();
  ::inference::Point* mutable_start();
  void set_allocated_start(::inference::Point* start);

  // .inference.Point end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  const ::inference::Point& end() const;
  ::inference::Point* release_end();
  ::inference::Point* mutable_end();
  void set_allocated_end(::inference::Point* end);

  // @@protoc_insertion_point(class_scope:inference.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::inference::Point* start_;
  ::inference::Point* end_;
  mutable int _cached_size_;
  friend struct ::protobuf_inference_2eproto::TableStruct;
  friend void ::protobuf_inference_2eproto::InitDefaultsObjectImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ShapeDetectionResponse

// repeated .inference.Point points = 1;
inline int ShapeDetectionResponse::points_size() const {
  return points_.size();
}
inline void ShapeDetectionResponse::clear_points() {
  points_.Clear();
}
inline const ::inference::Point& ShapeDetectionResponse::points(int index) const {
  // @@protoc_insertion_point(field_get:inference.ShapeDetectionResponse.points)
  return points_.Get(index);
}
inline ::inference::Point* ShapeDetectionResponse::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:inference.ShapeDetectionResponse.points)
  return points_.Mutable(index);
}
inline ::inference::Point* ShapeDetectionResponse::add_points() {
  // @@protoc_insertion_point(field_add:inference.ShapeDetectionResponse.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::inference::Point >*
ShapeDetectionResponse::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:inference.ShapeDetectionResponse.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::inference::Point >&
ShapeDetectionResponse::points() const {
  // @@protoc_insertion_point(field_list:inference.ShapeDetectionResponse.points)
  return points_;
}

// -------------------------------------------------------------------

// DetectionRequest

// .inference.Image image = 1;
inline bool DetectionRequest::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
inline void DetectionRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}
inline const ::inference::Image& DetectionRequest::image() const {
  const ::inference::Image* p = image_;
  // @@protoc_insertion_point(field_get:inference.DetectionRequest.image)
  return p != NULL ? *p : *reinterpret_cast<const ::inference::Image*>(
      &::inference::_Image_default_instance_);
}
inline ::inference::Image* DetectionRequest::release_image() {
  // @@protoc_insertion_point(field_release:inference.DetectionRequest.image)
  
  ::inference::Image* temp = image_;
  image_ = NULL;
  return temp;
}
inline ::inference::Image* DetectionRequest::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::inference::Image;
  }
  // @@protoc_insertion_point(field_mutable:inference.DetectionRequest.image)
  return image_;
}
inline void DetectionRequest::set_allocated_image(::inference::Image* image) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete image_;
  }
  if (image) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      image = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:inference.DetectionRequest.image)
}

// .inference.Rectangle rect = 2;
inline bool DetectionRequest::has_rect() const {
  return this != internal_default_instance() && rect_ != NULL;
}
inline void DetectionRequest::clear_rect() {
  if (GetArenaNoVirtual() == NULL && rect_ != NULL) {
    delete rect_;
  }
  rect_ = NULL;
}
inline const ::inference::Rectangle& DetectionRequest::rect() const {
  const ::inference::Rectangle* p = rect_;
  // @@protoc_insertion_point(field_get:inference.DetectionRequest.rect)
  return p != NULL ? *p : *reinterpret_cast<const ::inference::Rectangle*>(
      &::inference::_Rectangle_default_instance_);
}
inline ::inference::Rectangle* DetectionRequest::release_rect() {
  // @@protoc_insertion_point(field_release:inference.DetectionRequest.rect)
  
  ::inference::Rectangle* temp = rect_;
  rect_ = NULL;
  return temp;
}
inline ::inference::Rectangle* DetectionRequest::mutable_rect() {
  
  if (rect_ == NULL) {
    rect_ = new ::inference::Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:inference.DetectionRequest.rect)
  return rect_;
}
inline void DetectionRequest::set_allocated_rect(::inference::Rectangle* rect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rect_;
  }
  if (rect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rect, submessage_arena);
    }
    
  } else {
    
  }
  rect_ = rect;
  // @@protoc_insertion_point(field_set_allocated:inference.DetectionRequest.rect)
}

// -------------------------------------------------------------------

// Point

// int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:inference.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:inference.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:inference.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:inference.Point.y)
}

// -------------------------------------------------------------------

// Rectangle

// int32 x = 1;
inline void Rectangle::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Rectangle::x() const {
  // @@protoc_insertion_point(field_get:inference.Rectangle.x)
  return x_;
}
inline void Rectangle::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:inference.Rectangle.x)
}

// int32 y = 2;
inline void Rectangle::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Rectangle::y() const {
  // @@protoc_insertion_point(field_get:inference.Rectangle.y)
  return y_;
}
inline void Rectangle::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:inference.Rectangle.y)
}

// int32 width = 3;
inline void Rectangle::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Rectangle::width() const {
  // @@protoc_insertion_point(field_get:inference.Rectangle.width)
  return width_;
}
inline void Rectangle::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:inference.Rectangle.width)
}

// int32 height = 4;
inline void Rectangle::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Rectangle::height() const {
  // @@protoc_insertion_point(field_get:inference.Rectangle.height)
  return height_;
}
inline void Rectangle::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:inference.Rectangle.height)
}

// -------------------------------------------------------------------

// Region

// int32 x = 1;
inline void Region::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Region::x() const {
  // @@protoc_insertion_point(field_get:inference.Region.x)
  return x_;
}
inline void Region::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:inference.Region.x)
}

// int32 y = 2;
inline void Region::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Region::y() const {
  // @@protoc_insertion_point(field_get:inference.Region.y)
  return y_;
}
inline void Region::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:inference.Region.y)
}

// int32 width = 3;
inline void Region::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Region::width() const {
  // @@protoc_insertion_point(field_get:inference.Region.width)
  return width_;
}
inline void Region::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:inference.Region.width)
}

// int32 height = 4;
inline void Region::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Region::height() const {
  // @@protoc_insertion_point(field_get:inference.Region.height)
  return height_;
}
inline void Region::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:inference.Region.height)
}

// -------------------------------------------------------------------

// Image

// bytes content = 1;
inline void Image::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::content() const {
  // @@protoc_insertion_point(field_get:inference.Image.content)
  return content_.GetNoArena();
}
inline void Image::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.Image.content)
}
#if LANG_CXX11
inline void Image::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.Image.content)
}
#endif
inline void Image::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.Image.content)
}
inline void Image::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.Image.content)
}
inline ::std::string* Image::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:inference.Image.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_content() {
  // @@protoc_insertion_point(field_release:inference.Image.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:inference.Image.content)
}

// .inference.Region region = 2;
inline bool Image::has_region() const {
  return this != internal_default_instance() && region_ != NULL;
}
inline void Image::clear_region() {
  if (GetArenaNoVirtual() == NULL && region_ != NULL) {
    delete region_;
  }
  region_ = NULL;
}
inline const ::inference::Region& Image::region() const {
  const ::inference::Region* p = region_;
  // @@protoc_insertion_point(field_get:inference.Image.region)
  return p != NULL ? *p : *reinterpret_cast<const ::inference::Region*>(
      &::inference::_Region_default_instance_);
}
inline ::inference::Region* Image::release_region() {
  // @@protoc_insertion_point(field_release:inference.Image.region)
  
  ::inference::Region* temp = region_;
  region_ = NULL;
  return temp;
}
inline ::inference::Region* Image::mutable_region() {
  
  if (region_ == NULL) {
    region_ = new ::inference::Region;
  }
  // @@protoc_insertion_point(field_mutable:inference.Image.region)
  return region_;
}
inline void Image::set_allocated_region(::inference::Region* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete region_;
  }
  if (region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:inference.Image.region)
}

// -------------------------------------------------------------------

// Object

// .inference.Point start = 1;
inline bool Object::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline void Object::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
}
inline const ::inference::Point& Object::start() const {
  const ::inference::Point* p = start_;
  // @@protoc_insertion_point(field_get:inference.Object.start)
  return p != NULL ? *p : *reinterpret_cast<const ::inference::Point*>(
      &::inference::_Point_default_instance_);
}
inline ::inference::Point* Object::release_start() {
  // @@protoc_insertion_point(field_release:inference.Object.start)
  
  ::inference::Point* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::inference::Point* Object::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::inference::Point;
  }
  // @@protoc_insertion_point(field_mutable:inference.Object.start)
  return start_;
}
inline void Object::set_allocated_start(::inference::Point* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_;
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:inference.Object.start)
}

// .inference.Point end = 2;
inline bool Object::has_end() const {
  return this != internal_default_instance() && end_ != NULL;
}
inline void Object::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
}
inline const ::inference::Point& Object::end() const {
  const ::inference::Point* p = end_;
  // @@protoc_insertion_point(field_get:inference.Object.end)
  return p != NULL ? *p : *reinterpret_cast<const ::inference::Point*>(
      &::inference::_Point_default_instance_);
}
inline ::inference::Point* Object::release_end() {
  // @@protoc_insertion_point(field_release:inference.Object.end)
  
  ::inference::Point* temp = end_;
  end_ = NULL;
  return temp;
}
inline ::inference::Point* Object::mutable_end() {
  
  if (end_ == NULL) {
    end_ = new ::inference::Point;
  }
  // @@protoc_insertion_point(field_mutable:inference.Object.end)
  return end_;
}
inline void Object::set_allocated_end(::inference::Point* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete end_;
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:inference.Object.end)
}

// string label = 3;
inline void Object::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::label() const {
  // @@protoc_insertion_point(field_get:inference.Object.label)
  return label_.GetNoArena();
}
inline void Object::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inference.Object.label)
}
#if LANG_CXX11
inline void Object::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inference.Object.label)
}
#endif
inline void Object::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inference.Object.label)
}
inline void Object::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inference.Object.label)
}
inline ::std::string* Object::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:inference.Object.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_label() {
  // @@protoc_insertion_point(field_release:inference.Object.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:inference.Object.label)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace inference

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_inference_2eproto__INCLUDED
